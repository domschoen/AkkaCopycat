

      if (name.equals("top-down-group-scout--category")){
         slipnode group_cat = (slipnode) arguments.elementAt(0);
         print("trying to build "+group_cat.pname+" group");
         
         slipnode bond_category= slipnet_formulas.get_related_node(group_cat,slipnet.bond_category);
         if (bond_category==null) {
           //System.out.println("<c> no bond-category found");
           return true;
         }
          print("top-down-group-scout--category bond_category " + bond_category);

          double i_relevance = workspace_formulas.local_bond_category_relevance(
                                 workspace.initial,bond_category);
         double t_relevance = workspace_formulas.local_bond_category_relevance(
                                 workspace.target,bond_category);
         double i_unhappiness = workspace.initial.intra_string_unhappiness;
         double t_unhappiness = workspace.target.intra_string_unhappiness;

         print("about to choose string:");
         print("initial string: relevance="+i_relevance+", unhappiness="+i_unhappiness);
         print("target string: relevance="+t_relevance+", unhappiness="+t_unhappiness);
       
         workspace_string string = workspace.initial;
         if ((random.rnd()*(i_relevance+i_unhappiness+t_relevance+t_unhappiness))>
             (i_relevance+i_unhappiness)) {
                  string = workspace.target;
                  print("target string selected");
                  }
             else print("initial string selected");
         
         // choose an object on the workspace by intra-string-salience
         workspace_object fromob = workspace_formulas.choose_object("intra_string_salience",string.objects);
         print("object chosen: "+fromob);
         if (fromob.spans_string){
            print("chosen object spans the string. fizzle"); 
            return false;
         }
         slipnode direction;
         if (fromob.leftmost) direction=slipnet.right;
         else if (fromob.rightmost) direction=slipnet.left;
         else {
            Vector v = new Vector(); 
            v.addElement(new Double(slipnet.left.activation));
            v.addElement(new Double(slipnet.right.activation));
            if (workspace_formulas.select_list_position(v)==0) direction = slipnet.left; else direction = slipnet.right;                 }
         print("trying from "+fromob+" "+bond_category.pname+" checking to "+direction.pname+" first");
         
         bond first_bond;
         if (direction==slipnet.left) first_bond = fromob.left_bond;
         else first_bond = fromob.right_bond;
       
         if ((first_bond==null)||(first_bond.bond_category!=bond_category))
            {
             // check the other side of object
 
             if (direction==slipnet.right) first_bond = fromob.left_bond;
                else first_bond = fromob.right_bond;
             if ((first_bond==null)||(first_bond.bond_category!=bond_category))
                 {  
                   // this is a single letter group
                   if ((bond_category!=slipnet.sameness)||
                       (!(fromob instanceof letter))) {
                     print("no bonds of this type found: fizzle!");
                     return false; // fizzle
                       }
                    else {
                       print("thinking about a single letter group");
                       Vector oblist = new Vector(); 
                       oblist.addElement(fromob);
                       group g = new group(fromob.string,slipnet.samegrp,
                           null,slipnet.letter_category,
                           oblist, new Vector());
                       double prob = g.single_letter_group_probability();
                       if (random.rnd()<prob){
                          // propose single letter group
                          coderack.propose_group(oblist,new Vector(),
                               slipnet.samegrp,
                                null,slipnet.letter_category,this);
                          print("single letter group proposed");         
                       }
                       else print("failed");
                       return true;
                    }
                  }
             }
         direction = first_bond.direction_category;
         boolean search = true;
         slipnode bond_facet = null; 
         Vector object_list = new Vector();
         Vector bond_list = new Vector();
         // find leftmost object in group with these bonds
         while (search){
           search = false;
           if (fromob.left_bond!=null){
             if (fromob.left_bond.bond_category==bond_category){
                if ((fromob.left_bond.direction_category==null)||
                    (fromob.left_bond.direction_category==direction)){
                   if ((bond_facet==null)||(bond_facet==fromob.left_bond.bond_facet)){
                   bond_facet = fromob.left_bond.bond_facet;
                   direction = fromob.left_bond.direction_category;
                   fromob = fromob.left_bond.left_obj;
                   search=true;}
                }
             }
           }
         }

         // find rightmost object in group with these bonds
         search = true; workspace_object toob = fromob;
         while (search){
           search = false;
           if (toob.right_bond!=null){
             if (toob.right_bond.bond_category==bond_category){
                if ((toob.right_bond.direction_category==null)||
                    (toob.right_bond.direction_category==direction)){
                   if ((bond_facet==null)||(bond_facet==toob.right_bond.bond_facet)){
                   bond_facet = toob.right_bond.bond_facet;
                   direction = fromob.right_bond.direction_category;
                   toob = toob.right_bond.right_obj;
                   search=true;}
                }
             }
           }
         }
       
         if (toob == fromob) {
            print("no possible group - fizzle");
            return false;
         }
         print("proposing group from "+fromob+" to "+toob);
         object_list.addElement(fromob);
         while (fromob!=toob){
           bond_list.addElement(fromob.right_bond);
           object_list.addElement(fromob.right_bond.right_obj);
           fromob=fromob.right_bond.right_obj;
         }
        
         coderack.propose_group(object_list,bond_list,group_cat,direction,bond_facet,this);
      }

